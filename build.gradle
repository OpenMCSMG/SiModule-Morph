import javax.net.ssl.HttpsURLConnection

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.1'
group = 'cn.cyanbukkit.bukkit' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'SiModule-Morph'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'
    // lib 文件夹夹下的所有jar包
    compile fileTree(dir: 'libs', include: ['*.jar'])
    // kotlin 1.3.50
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50"
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "simodule-morph",
                "Specification-Vendor": "simodule-morph",
                "Specification-Version": "1.1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"morphaddon",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

build {
    doLast {
        println("Build success")
        uploadJar()
    }
}

// UTF-8
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar

        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


def uploadJar() {
    def s = "https://api.cyanbukkit.cn/v1/live/game/upload?name=${archivesBaseName}&version=${version}"
    def url = new URL(s).openConnection()
    url = url as HttpsURLConnection
    url.setRequestProperty("Content-Type", "application/java-archive")
    url.setRequestProperty("x-token", project.properties['token'] as String)
    println("Start upload")
    url.requestMethod = "PUT"
    url.doOutput = true
    try {
        url.outputStream.withStream { output ->
            shadowJarFile.inputStream().withStream { input ->
                input.transferTo(output)
            }
        }
    } catch (Exception e) {
        println("Error during file transfer: ${e.message}")
    }
    println("Uploading")
    if (url.responseCode != 200) {
        throw new IOException(url.content.text)
    } else {
        println("Upload success")
    }
}
//
//tasks.register('uploadJar', Copy) {
//
//    doLast {
//        // 获取构建目录和项目名称
//        def buildDir = project.buildDir
//        def projectDir = project.rootDir
//        def projectName = project.name
//        def version = project.version
//
//        // 构建 JAR 文件的路径
//        def shadowJarFile = new File("$buildDir/libs/${projectName}-${version}.jar")
//
//        // 定义上传函数
//        def uploadTo = {  ->
//
//        }
//
//        // 执行上传函数
//        uploadTo()
//    }
//}